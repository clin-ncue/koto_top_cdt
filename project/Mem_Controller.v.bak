module Mem_Controller(clk, NWrite, NTrigger,trigger, rst, addr, wene, status);

input wire clk;
input wire [7:0] NWrite;
input wire [7:0] NTrigger;
input wire trigger;
input wire rst;

output reg [15:0] addr;
output reg wene;
output reg status;


reg [15:0] addr_reg;
reg [7:0] counter;
reg [7:0] ntrig_reg = 0;
reg last;
reg self_rst;
reg status_reg = 0;

always @(posedge clk)
begin

	if(rst)
	begin
		wene = 0;
		counter = 8'b0;
		addr_reg = 0;
		addr = 0;
		self_rst = 0;
		ntrig_reg = 0;
		status = 0;
		status_reg = 0;
	end
	
	if(self_rst)
	begin
		wene = 0;
		counter = 8'b0;
		self_rst = 0;
	end

	wene = (trigger && ~status_reg)? 1:wene;
	ntrig_reg = (trigger && ~status_reg)? ntrig_reg + 1'b1: ntrig_reg;
	status_reg = (ntrig_reg==NTrigger+1'b1)? 1'b1:status_reg;
	
	if(wene && ~status_reg)
	begin
		addr = addr_reg;
		addr_reg = addr_reg + 1'b1;
		counter = counter + 1'b1;
		self_rst = (counter==NWrite)? 1:0;
	end 
	
	status = status_reg;		

end

endmodule