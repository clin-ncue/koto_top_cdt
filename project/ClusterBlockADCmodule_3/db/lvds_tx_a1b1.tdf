--altlvds_tx CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" COMMON_RX_TX_PLL="OFF" DESERIALIZATION_FACTOR=8 DEVICE_FAMILY="Stratix II" ENABLE_CLK_LATENCY="OFF" IMPLEMENT_IN_LES="OFF" INCLOCK_PERIOD=8000 INCLOCK_PHASE_SHIFT=0 NUMBER_OF_CHANNELS=2 OUTCLOCK_DIVIDE_BY=1 OUTCLOCK_PHASE_SHIFT=0 OUTCLOCK_RESOURCE="AUTO" OUTPUT_DATA_RATE=750 REGISTERED_INPUT="TX_CORECLK" USE_EXTERNAL_PLL="OFF" tx_in tx_inclock tx_out tx_outclock CARRY_CHAIN="IGNORE" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 8.0 cbx_altaccumulate 2008:02:23:252825 cbx_altclkbuf 2008:02:23:252825 cbx_altddio_in 2008:02:23:252825 cbx_altddio_out 2008:02:23:252825 cbx_altlvds_rx 2008:05:05:282633 cbx_altsyncram 2008:03:26:267331 cbx_cyclone 2008:02:23:252825 cbx_cycloneii 2008:02:23:252825 cbx_lpm_add_sub 2008:03:09:257947 cbx_lpm_compare 2008:02:23:252825 cbx_lpm_counter 2008:02:23:252825 cbx_lpm_decode 2008:02:23:252825 cbx_lpm_mux 2008:02:23:252825 cbx_lpm_shiftreg 2008:02:23:252825 cbx_mgl 2008:04:11:273944 cbx_stratix 2008:02:23:252825 cbx_stratixii 2008:02:23:252825 cbx_stratixiii 2008:04:23:278548 cbx_util_mgl 2008:04:15:275689  VERSION_END


-- Copyright (C) 1991-2008 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION altclkctrl_m0a (inclk[3..0])
RETURNS ( outclk);
FUNCTION stratixii_lvds_transmitter (clk0, datain[CHANNEL_WIDTH-1..0], enable0, postdpaserialdatain, serialdatain)
WITH ( BYPASS_SERIALIZER, CHANNEL_WIDTH, DIFFERENTIAL_DRIVE, INVERT_CLOCK, PREEMPHASIS_SETTING, USE_FALLING_CLOCK_EDGE, USE_POST_DPA_SERIAL_DATA_INPUT, USE_SERIAL_DATA_INPUT, VOD_SETTING)
RETURNS ( dataout, serialfdbkout);
FUNCTION stratixii_pll (areset, clkswitch, ena, fbin, inclk[1..0], pfdena, scanclk, scandata, scanread, scanwrite, testin[3..0])
WITH ( BANDWIDTH, BANDWIDTH_TYPE, C0_HIGH, C0_INITIAL, C0_LOW, C0_MODE, C0_PH, C0_TEST_SOURCE, C1_HIGH, C1_INITIAL, C1_LOW, C1_MODE, C1_PH, C1_TEST_SOURCE, C1_USE_CASC_IN, C2_HIGH, C2_INITIAL, C2_LOW, C2_MODE, C2_PH, C2_TEST_SOURCE, C2_USE_CASC_IN, C3_HIGH, C3_INITIAL, C3_LOW, C3_MODE, C3_PH, C3_TEST_SOURCE, C3_USE_CASC_IN, C4_HIGH, C4_INITIAL, C4_LOW, C4_MODE, C4_PH, C4_TEST_SOURCE, C4_USE_CASC_IN, C5_HIGH, C5_INITIAL, C5_LOW, C5_MODE, C5_PH, C5_TEST_SOURCE, C5_USE_CASC_IN, CHARGE_PUMP_CURRENT, CLK0_COUNTER, CLK0_DIVIDE_BY, CLK0_DUTY_CYCLE, CLK0_MULTIPLY_BY, CLK0_OUTPUT_FREQUENCY, CLK0_PHASE_SHIFT, CLK0_PHASE_SHIFT_NUM, clk0_use_even_counter_mode, clk0_use_even_counter_value, CLK1_COUNTER, CLK1_DIVIDE_BY, CLK1_DUTY_CYCLE, CLK1_MULTIPLY_BY, CLK1_OUTPUT_FREQUENCY, CLK1_PHASE_SHIFT, CLK1_PHASE_SHIFT_NUM, clk1_use_even_counter_mode, clk1_use_even_counter_value, CLK2_COUNTER, CLK2_DIVIDE_BY, CLK2_DUTY_CYCLE, CLK2_MULTIPLY_BY, CLK2_OUTPUT_FREQUENCY, CLK2_PHASE_SHIFT, CLK2_PHASE_SHIFT_NUM, clk2_use_even_counter_mode, clk2_use_even_counter_value, CLK3_COUNTER, CLK3_DIVIDE_BY, CLK3_DUTY_CYCLE, CLK3_MULTIPLY_BY, CLK3_OUTPUT_FREQUENCY, CLK3_PHASE_SHIFT, clk3_use_even_counter_mode, clk3_use_even_counter_value, CLK4_COUNTER, CLK4_DIVIDE_BY, CLK4_DUTY_CYCLE, CLK4_MULTIPLY_BY, CLK4_OUTPUT_FREQUENCY, CLK4_PHASE_SHIFT, clk4_use_even_counter_mode, clk4_use_even_counter_value, CLK5_COUNTER, CLK5_DIVIDE_BY, CLK5_DUTY_CYCLE, CLK5_MULTIPLY_BY, CLK5_OUTPUT_FREQUENCY, CLK5_PHASE_SHIFT, clk5_use_even_counter_mode, clk5_use_even_counter_value, CLKOUT_WIDTH = 6, COMMON_RX_TX, COMPENSATE_CLOCK, DOWN_SPREAD, ENABLE0_COUNTER, ENABLE1_COUNTER, ENABLE_SWITCH_OVER_COUNTER, FEEDBACK_SOURCE, GATE_LOCK_COUNTER, GATE_LOCK_SIGNAL, INCLK0_INPUT_FREQUENCY, INCLK1_INPUT_FREQUENCY, INVALID_LOCK_MULTIPLIER, LOOP_FILTER_C, LOOP_FILTER_R, M, M2, M_INITIAL, M_PH, M_TEST_SOURCE, N, N2, OPERATION_MODE, PFD_MAX, PFD_MIN, PLL_COMPENSATION_DELAY, PLL_TYPE, QUALIFY_CONF_DONE, SCAN_CHAIN_MIF_FILE, SCLKOUT0_PHASE_SHIFT, SCLKOUT1_PHASE_SHIFT, self_reset_on_gated_loss_lock, SIMULATION_TYPE, SPREAD_FREQUENCY, SS, SWITCH_OVER_COUNTER, SWITCH_OVER_ON_GATED_LOCK, SWITCH_OVER_ON_LOSSCLK, SWITCH_OVER_TYPE, TEST_FEEDBACK_COMP_DELAY_CHAIN_BITS, TEST_INPUT_COMP_DELAY_CHAIN_BITS, USE_DC_COUPLING, VALID_LOCK_MULTIPLIER, VCO_CENTER, VCO_DIVIDE_BY, VCO_MAX, VCO_MIN, VCO_MULTIPLY_BY, VCO_POST_SCALE)
RETURNS ( activeclock, clk[CLKOUT_WIDTH-1..0], clkbad[1..0], clkloss, enable0, enable1, locked, scandataout, scandone, sclkout[1..0], testdownout, testupout);

--synthesis_resources = clkctrl 1 reg 16 stratixii_lvds_transmitter 3 stratixii_pll 1 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to txreg} PRESERVE_REGISTER=ON;{-to pll} AUTO_MERGE_PLLS=OFF;{ -from ""txreg*"" -to ""tx*"" }MULTICYCLE=7;{ -from ""txreg*"" -to ""tx*"" }MULTICYCLE_HOLD=8";

SUBDESIGN lvds_tx_a1b1
( 
	tx_in[15..0]	:	input;
	tx_inclock	:	input;
	tx_out[1..0]	:	output;
	tx_outclock	:	output;
) 
VARIABLE 
	coreclk_buf : altclkctrl_m0a;
	txreg[15..0] : dffe;
	outclock_tx : stratixii_lvds_transmitter
		WITH (
			BYPASS_SERIALIZER = "true",
			CHANNEL_WIDTH = 8,
			INVERT_CLOCK = "false",
			USE_FALLING_CLOCK_EDGE = "false"
		);
	tx[1..0] : stratixii_lvds_transmitter
		WITH (
			CHANNEL_WIDTH = 8
		);
	pll : stratixii_pll
		WITH (
			CLK0_DIVIDE_BY = 8,
			CLK0_MULTIPLY_BY = 6,
			CLK0_PHASE_SHIFT = "-666",
			COMPENSATE_CLOCK = "lvdsclk",
			INCLK0_INPUT_FREQUENCY = 8000,
			OPERATION_MODE = "normal",
			PLL_TYPE = "fast",
			SCLKOUT0_PHASE_SHIFT = "-666",
			VCO_DIVIDE_BY = 1,
			VCO_MULTIPLY_BY = 6
		);
	pll_areset	: NODE;
	tx_pll_enable	: NODE;

BEGIN 
	coreclk_buf.inclk[] = ( B"000", pll.clk[0..0]);
	txreg[].clk = coreclk_buf.outclk;
	txreg[].d = tx_in[];
	outclock_tx.clk0 = pll.sclkout[0..0];
	outclock_tx.enable0 = pll.enable0;
	tx[].clk0 = pll.sclkout[0..0];
	tx[].datain[] = txreg[].q;
	tx[].enable0 = pll.enable0;
	pll.areset = pll_areset;
	pll.ena = tx_pll_enable;
	pll.inclk[] = ( GND, tx_inclock);
	pll_areset = GND;
	tx_out[] = tx[].dataout;
	tx_outclock = outclock_tx.dataout;
	tx_pll_enable = VCC;
END;
--VALID FILE
